##################################################################
# Функции. Задание на самостоятельную работу
##################################################################

#1. Напишите функцию, в которую поступает число N и которая
# возвращает количество цифр в этом числе

# def number_of_digits(n):
#   n = str(n)
#   return (len(n))

# print(number_of_digits(2535))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#2. Вводятся натуральные числа N и K. Напишите функцию, которая
#возвращает количество цифр K в числе N.

# def digits_in_numbers(n,k):

#   digits = []
#   digit_counter = 0

#   while (n//10 != 0):
#     digits.append(n%10)
#     n = n // 10
#   digits.append(n)

#   for digit in digits:
#     if digit == k:
#       digit_counter += 1
  
#   return digit_counter

# n = int(input("Введите число, в котором нужно найти количество цифр >> "))
# k = int(input("Введите цифру, которую нужно найти >> "))

# print(digits_in_numbers(n,k))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#3. Дана строка, содержащая буквы и цифры. Подсчитайте
#количество цифр в данной строке (*количество уникальных
#цифр).

# def number_of_unique_digits(s):
#   digit_list = []

#   for symbol in s:
#     if symbol.isdigit():
#       digit_list.append(symbol)

#   digit_list = set(digit_list)
#   return len(digit_list)

# stroka = """Население Земли с 1 000 года до 2 000 года выросло более чем в 22 раза. На 1 июля 1 000 года было 275 000 000 человек, 
# а 1 июля 2 000 года на Земле насчитывалось уже 6 145 006 989 человек."""

# print(number_of_unique_digits(stroka))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##################################################################
# Задание на практику. 
##################################################################

#Напишите программу, вычисляющую НОД последовательности чисел
#до 0. Новое число вводится в новой строке. Программа должна
#использовать функцию gcd.

# def gcd(a,b):
#   while b!=0:
#     a = b
#     b = a % b
#   return a

# last_number_sequence = int(input("Введите конечное число последовательности >>>"))

# for i in range(last_number_sequence,0,-1):
#   print(f"Для чисел {i} и {(i-1)} НОД={ gcd(i, (i-1)) }")

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#2. Программа «площадь треугольника»
#a) Напишите функцию Len, вычисляющую длину отрезка по координатам его концов. В эту функцию передается 4 целых числа – координаты точек.
#b) Вторая функция данной программы – square. Она вычисляет площадь треугольника по формуле Герона. В эту функцию передаются 6 целых чисел – координатx x1, y1, x2, y2, x3, y3 вершин треугольника. Она должна использовать функцию Len.
#c) Все данные вводятся в основной программе. Вызовите в ней функцию square. Ответ выведите с точностью до 6 знаков после десятичной точки, отведя 
# под #него 10 позиций.
# import math

# def Len(x_1,y_1,x_2,y_2):
#   """ Функция принимает в себя
#   четыре координаты x_1 и y_1 - координаты
#   первой точки, а x_2 и y_2 - координаты второй
#   По ним строится отрезок. Для вычисления длины
#   отрезка воспользуемся формулой поиска гипотенузы 
#   прямоугольного треугольника """
#   len = math.sqrt((x_2-x_1)**2+(y_2-y_1)**2)
#   return len

# def Square (x_1,y_1,x_2,y_2,x_3,y_3):
#   #Вычисление длин
#   ab =  Len(x_1,y_1,x_2,y_2)
#   ac = Len(x_1,y_1,x_3,y_3)
#   bc = Len(x_2,y_2,x_3,y_3)

#   #Поиск площади треугольника по формуле Герона
#   p = 0.5 * (ab+bc+ac)
#   s = math.sqrt(p*(p-ab)*(p-bc)*(p-ac))
#   return s

# x_1 = int(input("Введите Х координату вершины 1 >> "))
# y_1 = int(input("Введите Y координату вершины 1 >> "))

# x_2 = int(input("Введите Х координату вершины 2 >> "))
# y_2 = int(input("Введите Y координату вершины 2 >> "))

# x_3 = int(input("Введите Х координату вершины 3 >> "))
# y_3 = int(input("Введите Y координату вершины 3 >> "))

# print("Площадь треугольника равна %10.6f" % Square(x_1,y_1,x_2,y_2,x_3,y_3))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 3. С помощью функций напечатайте таблицу умножения
# def row_print (number):
#   for i in range(1,10):
#     print(f"{i} x {number} = {i*number:2}",end="    ")
#   print()

# def table_print():
#   for i in range (1,10):
#     row_print(i)

# table_print()

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

############################################################
# Анонимные функции. Задание на практику
############################################################


#Написать функцию, которая возвращает минимум и максимум
#из вводимой до нуля последовательности. Число 0 не
#учитывать, последовательность вводить внутри функции.


# def get_min_and_max():
#   element_list = []
#   element = 1
#   while (element != 0):
#     element = int(input("Введите элемент последовательности. 0 - прекратить ввод: "))
#     element_list.append(element)
  
#   del[element_list[len(element_list)-1]]

#   maximum = max (element_list)
#   minimum = min (element_list)

#   return maximum,minimum

# print(get_min_and_max())

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Написать функцию, которая получает произвольное число
#параметров целых чисел и возвращает их среднее
#арифметическое

# def average (*numbers):
#   sum = 0
#   for i in numbers:
#     sum += i
#   return sum/len(numbers)

# print (average(10,10,10))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~